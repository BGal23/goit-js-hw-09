{"mappings":"AAAA,MAAMA,EAAQC,SAASC,iBAAiB,SAClCC,EAAYF,SAASG,cAAc,UACzC,IAAIC,EA6BJF,EAAUG,iBAAiB,SAhBVC,IACfA,EAAMC,iBACN,IAAIC,EAAQ,EACRC,EAAuB,EAAfV,EAAM,GAAGW,MACrBC,YAAW,KACTP,EAAUQ,aAAY,KAhBJ,EAACC,EAAUJ,KACTK,KAAKC,SAAW,GAGpCC,QAAQC,IAAI,uBAAqBJ,QAAiBJ,OAGlDO,QAAQC,IAAI,sBAAoBJ,QAAeJ,MAAU,EAUvDS,CAAcV,EAAOC,GACrBD,IACAC,GAA+B,EAAfV,EAAM,GAAGW,MACrBF,EAAQ,GAAKT,EAAM,GAAGW,OACxBS,cAAcf,EAAQ,GAEvBL,EAAM,GAAGW,MAAM,GACjBX,EAAM,GAAGW,MAAQX,EAAM,GAAGW,MAAM","sources":["src/js/03-promises.js"],"sourcesContent":["const input = document.querySelectorAll(\"input\")\nconst btnCreate = document.querySelector(\"button\")\nlet timerId;\n\nconst createPromise = (position, delay) => {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n  } else {\n    // Reject\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n  }\n}\n\nconst newTask = (event) => {\n  event.preventDefault()\n  let meter = 1;\n  let delay = input[0].value*1;\n  setTimeout(() => {\n    timerId = setInterval(() => {\n      createPromise(meter, delay)\n      meter++;\n      delay = delay + input[1].value*1\n      if (meter - 1 >= input[2].value) {\n        clearInterval(timerId)\n      }\n    }, input[1].value)\n  }, input[0].value - input[1].value)\n}\n\nbtnCreate.addEventListener(\"click\", newTask)"],"names":["$47d4ff9957288465$var$input","document","querySelectorAll","$47d4ff9957288465$var$btnCreate","querySelector","$47d4ff9957288465$var$timerId","addEventListener","event","preventDefault","meter","delay","value","setTimeout","setInterval","position","Math","random","console","log","$47d4ff9957288465$var$createPromise","clearInterval"],"version":3,"file":"03-promises.8ef74d96.js.map"}